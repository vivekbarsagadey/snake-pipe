[project]
name = "snake-pipe"
version = "0.1.0"
description = "Python-based ETL pipeline framework"
authors = [
    { name = "Vivek Barsagadey", email = "vivek@example.com" }
]
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    "pandas>=2.0.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "pydantic-ai>=0.7.2",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "openpyxl>=3.1.0",
    "psycopg2-binary>=2.9.0",
    "watchdog>=6.0.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
warehouse = [
    "snowflake-connector-python>=3.7.0",
    "google-cloud-bigquery>=3.11.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=3.0.0",
    "autopep8>=2.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "mdformat>=0.7.0",
    "mdformat-tables>=0.4.0",
]
all = [
    "snake-pipe[warehouse,dev]"
]

[project.urls]
Homepage = "https://github.com/vivekbarsagadey/snake-pipe"
Repository = "https://github.com/vivekbarsagadey/snake-pipe"
Documentation = "https://github.com/vivekbarsagadey/snake-pipe/README.md"
Issues = "https://github.com/vivekbarsagadey/snake-pipe/issues"

[project.scripts]
snake-pipe = "snake_pipe.pipeline:run_pipeline"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["snake_pipe"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=3.0.0",
    "autopep8>=2.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "mdformat>=0.7.0",
    "mdformat-tables>=0.4.0",
    "pytest-asyncio>=1.1.0",
]

[tool.black]
line-length = 200
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 200
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["snake_pipe"]
known_third_party = ["pandas", "sqlalchemy", "pydantic", "requests"]

[tool.flake8]
max-line-length = 200
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (black handles this)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",  # ignore unused imports in __init__.py
    "tests/*:D",         # ignore docstring requirements in tests
]

[tool.pylint]
max-line-length = 200
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
    "C0103",  # invalid-name (for df, etc.)
]
good-names = ["df", "db", "i", "j", "k", "ex", "Run", "_", "id"]

[tool.autopep8]
max_line_length = 200
aggressive = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess2

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=snake_pipe",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async",
    "performance: marks tests as performance tests",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "sqlalchemy.*",
    "snowflake.*",
    "google.cloud.*",
    "psycopg2.*",
    "requests.*",
    "openpyxl.*",
]
ignore_missing_imports = true

# Markdown formatting configuration
[tool.mdformat]
wrap = 200
number = false
end_of_line = "lf"
