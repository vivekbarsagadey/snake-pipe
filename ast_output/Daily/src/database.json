{
  "filePath" : "/home/darshan/Projects/Simple-Java-Helpdesk-Application-master/Daily/src/database.java",
  "uniqueId" : "AST_796_1754048980321",
  "imports" : [ "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n * @author w032jwm\n */\nimport java.sql.Connection;", "import java.sql.DriverManager;", "import java.sql.ResultSet;", "import java.sql.Statement;", "import java.util.ArrayList;" ],
  "classes" : [ {
    "name" : "database",
    "qualifiedName" : "database",
    "modifiers" : "[public ]",
    "isInterface" : false,
    "extendsList" : "[]",
    "implementsList" : "[]",
    "annotations" : "[]",
    "comment" : "\r\n *\r\n * @author mayj\r\n ",
    "typeParameters" : [ ],
    "isAbstract" : false,
    "isFinal" : false,
    "isStatic" : false,
    "isInner" : false,
    "uniqueId" : "AST_797_1754048980322",
    "symbolId" : "database",
    "fields" : [ {
      "name" : "con",
      "qualifiedName" : "database.con",
      "declaredType" : "Connection",
      "resolvedType" : "java.sql.Connection",
      "erasedType" : "java.sql.Connection",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_798_1754048980322",
      "symbolId" : "database.con",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "stmt",
      "qualifiedName" : "database.stmt",
      "declaredType" : "Statement",
      "resolvedType" : "java.sql.Statement",
      "erasedType" : "java.sql.Statement",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_799_1754048980323",
      "symbolId" : "database.stmt",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "rs",
      "qualifiedName" : "database.rs",
      "declaredType" : "ResultSet",
      "resolvedType" : "java.sql.ResultSet",
      "erasedType" : "java.sql.ResultSet",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_800_1754048980323",
      "symbolId" : "database.rs",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "viewrs",
      "qualifiedName" : "database.viewrs",
      "declaredType" : "ResultSet",
      "resolvedType" : "java.sql.ResultSet",
      "erasedType" : "java.sql.ResultSet",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_801_1754048980323",
      "symbolId" : "database.viewrs",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "viewstmt",
      "qualifiedName" : "database.viewstmt",
      "declaredType" : "Statement",
      "resolvedType" : "java.sql.Statement",
      "erasedType" : "java.sql.Statement",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_802_1754048980323",
      "symbolId" : "database.viewstmt",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "rowrs",
      "qualifiedName" : "database.rowrs",
      "declaredType" : "ResultSet",
      "resolvedType" : "java.sql.ResultSet",
      "erasedType" : "java.sql.ResultSet",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_803_1754048980323",
      "symbolId" : "database.rowrs",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "rowstmt",
      "qualifiedName" : "database.rowstmt",
      "declaredType" : "Statement",
      "resolvedType" : "java.sql.Statement",
      "erasedType" : "java.sql.Statement",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_804_1754048980323",
      "symbolId" : "database.rowstmt",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "emprs",
      "qualifiedName" : "database.emprs",
      "declaredType" : "ResultSet",
      "resolvedType" : "java.sql.ResultSet",
      "erasedType" : "java.sql.ResultSet",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_805_1754048980323",
      "symbolId" : "database.emprs",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "empstmt",
      "qualifiedName" : "database.empstmt",
      "declaredType" : "Statement",
      "resolvedType" : "java.sql.Statement",
      "erasedType" : "java.sql.Statement",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_806_1754048980324",
      "symbolId" : "database.empstmt",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "tickets",
      "qualifiedName" : "database.tickets",
      "declaredType" : "ArrayList",
      "resolvedType" : "java.util.ArrayList",
      "erasedType" : "java.util.ArrayList",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "value" : "new ArrayList()",
      "uniqueId" : "AST_807_1754048980324",
      "symbolId" : "database.tickets",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    }, {
      "name" : "currentticket",
      "qualifiedName" : "database.currentticket",
      "declaredType" : "phonecallTicket",
      "resolvedType" : "phonecallTicket",
      "erasedType" : "phonecallTicket",
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "uniqueId" : "AST_808_1754048980324",
      "symbolId" : "database.currentticket",
      "isStatic" : false,
      "isFinal" : false,
      "visibility" : "PACKAGE"
    } ],
    "constructors" : [ {
      "name" : "database",
      "signature" : "database()",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[]",
      "annotations" : "[]",
      "comment" : "No comment",
      "body" : "{\n    try {\n        //Attempt connection to the database\n        Class.forName(\"org.apache.derby.jdbc.ClientDriver\");\n        con = DriverManager.getConnection(\"jdbc:derby://localhost:1527/dial\", \"jeremy\", \"jeremy\");\n        stmt = con.createStatement();\n        Class.forName(\"org.apache.derby.jdbc.ClientDriver\");\n        //set put the view Result Set to be the first record in set   (next/prev/console?)\n        this.viewstmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n        this.viewrs = viewstmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\");\n        this.viewrs.beforeFirst();\n        this.viewrs.next();\n        //Set up the row Result Set to be able to go to any row you want (Row function)\n        this.rowstmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n        this.rowrs = rowstmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\");\n        this.rowrs.beforeFirst();\n        this.rowrs.next();\n        //RS and stmt for the employee table.\n        this.empstmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n        this.emprs = empstmt.executeQuery(\"SELECT * FROM JEREMY.EMPLOYEE\");\n        this.emprs.beforeFirst();\n        this.emprs.next();\n        //set up the first default ticket ticket for view Result Set\n        currentticket = makeTicket(viewrs.getInt(\"ID\"), viewrs.getString(\"NAME\"), viewrs.getString(\"PHONE\"), viewrs.getString(\"TAG\"), viewrs.getString(\"DATE\"), viewrs.getString(\"PROBLEM\"), viewrs.getString(\"NOTES\"), viewrs.getString(\"STATUS\"));\n    } catch (Exception e) {\n        System.out.println(\"SQL constructor problem \" + e);\n    }\n}",
      "uniqueId" : "AST_809_1754048980325",
      "symbolId" : "database.database()",
      "visibility" : "PACKAGE"
    } ],
    "methods" : [ {
      "name" : "getTicket",
      "qualifiedName" : "database.getTicket",
      "signature" : "getTicket()",
      "returnType" : "phonecallTicket",
      "resolvedReturnType" : "phonecallTicket",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * gives the current phonecallTicket object in the database\r\n     * @return phonecallTicket \r\n     ",
      "body" : "{\n    return currentticket;\n}",
      "uniqueId" : "AST_810_1754048980326",
      "symbolId" : "database.getTicket()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ ],
      "methodCalls" : [ ],
      "cyclomaticComplexity" : 1,
      "totalLines" : 3,
      "codeLines" : 3,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "getRow",
      "qualifiedName" : "database.getRow",
      "signature" : "getRow(int)",
      "returnType" : "phonecallTicket",
      "resolvedReturnType" : "phonecallTicket",
      "parameters" : [ "row" ],
      "parameterTypes" : [ "int" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Takes in a row, uses ROWRS to query which db item is in which row\r\n     * and then it sets that item as the current displayed item.\r\n     * @param row\r\n     * @return phonecallTicket object\r\n     ",
      "body" : "{\n    System.out.println(\"ROW IS!!! \" + row);\n    try {\n        if (row > total() || row < 0)\n            System.out.println(\"invalid row\");\n        else {\n            rowrs.absolute(row);\n            int id_col = rowrs.getInt(\"ID\");\n            String first_name = rowrs.getString(\"NAME\");\n            String phone = rowrs.getString(\"PHONE\");\n            String tag = rowrs.getString(\"TAG\");\n            String date = rowrs.getString(\"DATE\");\n            String prob = rowrs.getString(\"PROBLEM\");\n            String notes = rowrs.getString(\"NOTES\");\n            String status = rowrs.getString(\"STATUS\");\n            currentticket = makeTicket(id_col, first_name, phone, tag, date, prob, notes, status);\n        }\n        //else\n    } catch (Exception e) {\n        System.out.println(\"SQL problem at getRow()\");\n    }\n    return currentticket;\n}",
      "uniqueId" : "AST_811_1754048980327",
      "symbolId" : "database.getRow(int)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "If: row > total() || row < 0" ],
      "methodCalls" : [ {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"ROW IS!!! \" + row)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"ROW IS!!! \" + row" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_812_1754048980328"
      }, {
        "methodName" : "total",
        "sourceCode" : "total()",
        "resolvedMethod" : "database.total()",
        "returnType" : "int",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_813_1754048980329"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"invalid row\")",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"invalid row\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_814_1754048980329"
      }, {
        "methodName" : "absolute",
        "sourceCode" : "rowrs.absolute(row)",
        "resolvedMethod" : "java.sql.ResultSet.absolute(int)",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "row" ],
        "argumentTypes" : [ "int" ],
        "uniqueId" : "AST_815_1754048980330"
      }, {
        "methodName" : "getInt",
        "sourceCode" : "rowrs.getInt(\"ID\")",
        "resolvedMethod" : "java.sql.ResultSet.getInt(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_816_1754048980330"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_817_1754048980330"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"PHONE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PHONE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_818_1754048980331"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"TAG\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"TAG\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_819_1754048980331"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"DATE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"DATE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_820_1754048980331"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"PROBLEM\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PROBLEM\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_821_1754048980331"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"NOTES\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NOTES\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_822_1754048980332"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rowrs.getString(\"STATUS\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"STATUS\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_823_1754048980332"
      }, {
        "methodName" : "makeTicket",
        "sourceCode" : "makeTicket(id_col, first_name, phone, tag, date, prob, notes, status)",
        "resolvedMethod" : "database.makeTicket(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "isStatic" : false,
        "arguments" : [ "id_col", "first_name", "phone", "tag", "date", "prob", "notes", "status" ],
        "argumentTypes" : [ "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
        "uniqueId" : "AST_824_1754048980333"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem at getRow()\")",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem at getRow()\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_825_1754048980335"
      } ],
      "cyclomaticComplexity" : 5,
      "totalLines" : 23,
      "codeLines" : 22,
      "commentLines" : 1,
      "blankLines" : 0
    }, {
      "name" : "total",
      "qualifiedName" : "database.total",
      "signature" : "total()",
      "returnType" : "int",
      "resolvedReturnType" : "int",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Returns total number of rows in table with STMT and RS\r\n     * @return int rows\r\n     ",
      "body" : "{\n    int rows = 0;\n    try {\n        rs = stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET\");\n        while (rs.next()) {\n            rows++;\n        }\n        System.out.println(\"There are \" + rows + \" record in the table\");\n    } catch (Exception e) {\n    }\n    return rows;\n}",
      "uniqueId" : "AST_826_1754048980337",
      "symbolId" : "database.total()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "While: rs.next()" ],
      "methodCalls" : [ {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.TICKET\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_827_1754048980338"
      }, {
        "methodName" : "next",
        "sourceCode" : "rs.next()",
        "resolvedMethod" : "java.sql.ResultSet.next()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_828_1754048980338"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"There are \" + rows + \" record in the table\")",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"There are \" + rows + \" record in the table\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_829_1754048980338"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 12,
      "codeLines" : 12,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "updateViewRs",
      "qualifiedName" : "database.updateViewRs",
      "signature" : "updateViewRs()",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *Used by main to update view rs to show current selection after an adddition\r\n     ",
      "body" : "{\n    try {\n        this.viewrs = viewstmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\");\n        //      viewrs.beforeFirst();\n        //           viewrs.next();\n    } catch (Exception e) {\n        System.out.println(\"sql exception at updateViewRs\" + e);\n    }\n}",
      "uniqueId" : "AST_830_1754048980340",
      "symbolId" : "database.updateViewRs()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "executeQuery",
        "sourceCode" : "viewstmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.TICKET ORDER BY ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_831_1754048980340"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"sql exception at updateViewRs\" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"sql exception at updateViewRs\" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_832_1754048980340"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 9,
      "codeLines" : 7,
      "commentLines" : 2,
      "blankLines" : 0
    }, {
      "name" : "addTicket",
      "qualifiedName" : "database.addTicket",
      "signature" : "addTicket(phonecallTicket)",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ "ticket" ],
      "parameterTypes" : [ "phonecallTicket" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * takes in a phonecallTicket obj, puts it in a sql statement\r\n     * and then executes the sql statement to add a RECORD of TICKET in to TICKET DB\r\n     * @param ticket\r\n     ",
      "body" : "{\n    try {\n        System.out.println(\"Number of tickets? \" + (total() + 1));\n        String insert = \"INSERT INTO JEREMY.TICKET \" + \"(ID,NAME,PHONE,TAG,DATE,PROBLEM,NOTES,STATUS) \" + \"VALUES \" + \"(\" + (total() + 1) + \",'\" + ticket.who + \"','\" + ticket.phone + \"','\" + ticket.tag + \"',' \" + ticket.date + \"',' \" + ticket.problem + \"',' \" + ticket.notes + \"','\" + \"NEW\" + \"')\";\n        System.out.println(insert);\n        stmt.executeUpdate(insert);\n        rs = stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET\");\n        total();\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    tickets.add(ticket);\n}",
      "uniqueId" : "AST_833_1754048980341",
      "symbolId" : "database.addTicket(phonecallTicket)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"Number of tickets? \" + (total() + 1))",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"Number of tickets? \" + (total() + 1)" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_834_1754048980342"
      }, {
        "methodName" : "total",
        "sourceCode" : "total()",
        "resolvedMethod" : "database.total()",
        "returnType" : "int",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_835_1754048980343"
      }, {
        "methodName" : "total",
        "sourceCode" : "total()",
        "resolvedMethod" : "database.total()",
        "returnType" : "int",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_836_1754048980343"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(insert)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "insert" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_837_1754048980343"
      }, {
        "methodName" : "executeUpdate",
        "sourceCode" : "stmt.executeUpdate(insert)",
        "resolvedMethod" : "java.sql.Statement.executeUpdate(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "insert" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_838_1754048980344"
      }, {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.TICKET\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_839_1754048980344"
      }, {
        "methodName" : "total",
        "sourceCode" : "total()",
        "resolvedMethod" : "database.total()",
        "returnType" : "int",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_840_1754048980344"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_841_1754048980345"
      }, {
        "methodName" : "add",
        "sourceCode" : "tickets.add(ticket)",
        "isStatic" : false,
        "arguments" : [ "ticket" ],
        "argumentTypes" : [ "unknown" ],
        "uniqueId" : "AST_842_1754048980345"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 13,
      "codeLines" : 13,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "makeTicket",
      "qualifiedName" : "database.makeTicket",
      "signature" : "makeTicket(int, String, String, String, String, String, String, String)",
      "returnType" : "phonecallTicket",
      "resolvedReturnType" : "phonecallTicket",
      "parameters" : [ "id", "who", "phone", "tag", "date", "problem", "notes", "status" ],
      "parameterTypes" : [ "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *Helper method to create a ticket, this .java uses it\r\n     * @param id\r\n     * @param who\r\n     * @param phone\r\n     * @param tag\r\n     * @param date\r\n     * @param problem\r\n     * @param notes\r\n     * @param status\r\n     * @return\r\n     ",
      "body" : "{\n    phonecallTicket ticket = new phonecallTicket(id, who, phone, tag, date, problem, notes, status);\n    currentticket = ticket;\n    return ticket;\n}",
      "uniqueId" : "AST_843_1754048980346",
      "symbolId" : "database.makeTicket(int, String, String, String, String, String, String, String)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ ],
      "methodCalls" : [ ],
      "cyclomaticComplexity" : 1,
      "totalLines" : 5,
      "codeLines" : 5,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "nextTicket",
      "qualifiedName" : "database.nextTicket",
      "signature" : "nextTicket(phonecallTicket)",
      "returnType" : "phonecallTicket",
      "resolvedReturnType" : "phonecallTicket",
      "parameters" : [ "ticket" ],
      "parameterTypes" : [ "phonecallTicket" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * used in ViewTicket to do next function. Takes in/returns a ticket\r\n     * so that if there is no next ticket, it will return same object\r\n     * uses VIEWRS to query next record in DB\r\n     * @param ticket\r\n     * @return\r\n     ",
      "body" : "{\n    try {\n        if (!viewrs.isLast()) {\n            viewrs.next();\n            int id_col = viewrs.getInt(\"ID\");\n            String first_name = viewrs.getString(\"NAME\");\n            String phone = viewrs.getString(\"PHONE\");\n            String tag = viewrs.getString(\"TAG\");\n            String date = viewrs.getString(\"DATE\");\n            String prob = viewrs.getString(\"PROBLEM\");\n            String notes = viewrs.getString(\"NOTES\");\n            String status = viewrs.getString(\"STATUS\");\n            ticket = makeTicket(id_col, first_name, phone, tag, date, prob, notes, status);\n        }\n    } catch (Exception e) {\n        System.out.println(\"SQL nextTicket() problem \" + e);\n    }\n    return ticket;\n}",
      "uniqueId" : "AST_844_1754048980348",
      "symbolId" : "database.nextTicket(phonecallTicket)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "If: !viewrs.isLast()" ],
      "methodCalls" : [ {
        "methodName" : "isLast",
        "sourceCode" : "viewrs.isLast()",
        "resolvedMethod" : "java.sql.ResultSet.isLast()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_845_1754048980349"
      }, {
        "methodName" : "next",
        "sourceCode" : "viewrs.next()",
        "resolvedMethod" : "java.sql.ResultSet.next()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_846_1754048980350"
      }, {
        "methodName" : "getInt",
        "sourceCode" : "viewrs.getInt(\"ID\")",
        "resolvedMethod" : "java.sql.ResultSet.getInt(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_847_1754048980350"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_848_1754048980350"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"PHONE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PHONE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_849_1754048980350"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"TAG\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"TAG\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_850_1754048980351"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"DATE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"DATE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_851_1754048980351"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"PROBLEM\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PROBLEM\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_852_1754048980351"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"NOTES\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NOTES\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_853_1754048980351"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"STATUS\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"STATUS\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_854_1754048980352"
      }, {
        "methodName" : "makeTicket",
        "sourceCode" : "makeTicket(id_col, first_name, phone, tag, date, prob, notes, status)",
        "resolvedMethod" : "database.makeTicket(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "isStatic" : false,
        "arguments" : [ "id_col", "first_name", "phone", "tag", "date", "prob", "notes", "status" ],
        "argumentTypes" : [ "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
        "uniqueId" : "AST_855_1754048980352"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL nextTicket() problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL nextTicket() problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_856_1754048980353"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 19,
      "codeLines" : 19,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "previousTicket",
      "qualifiedName" : "database.previousTicket",
      "signature" : "previousTicket(phonecallTicket)",
      "returnType" : "phonecallTicket",
      "resolvedReturnType" : "phonecallTicket",
      "parameters" : [ "ticket" ],
      "parameterTypes" : [ "phonecallTicket" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * used in ViewTicket to do previous function. Takes in/returns a ticket\r\n     * so that if there is no previous ticket, it will return same object\r\n     * uses VIEWRS to query next record in DB\r\n     * @param ticket\r\n     * @return\r\n     ",
      "body" : "{\n    try {\n        if (!viewrs.isFirst()) {\n            viewrs.previous();\n            int id_col = viewrs.getInt(\"ID\");\n            String first_name = viewrs.getString(\"NAME\");\n            String phone = viewrs.getString(\"PHONE\");\n            String tag = viewrs.getString(\"TAG\");\n            String date = viewrs.getString(\"DATE\");\n            String prob = viewrs.getString(\"PROBLEM\");\n            String notes = viewrs.getString(\"NOTES\");\n            String status = viewrs.getString(\"STATUS\");\n            ticket = makeTicket(id_col, first_name, phone, tag, date, prob, notes, status);\n        }\n    } catch (Exception e) {\n        System.out.println(\"SQL nextTicket() problem \" + e);\n    }\n    return ticket;\n}",
      "uniqueId" : "AST_857_1754048980356",
      "symbolId" : "database.previousTicket(phonecallTicket)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "If: !viewrs.isFirst()" ],
      "methodCalls" : [ {
        "methodName" : "isFirst",
        "sourceCode" : "viewrs.isFirst()",
        "resolvedMethod" : "java.sql.ResultSet.isFirst()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_858_1754048980357"
      }, {
        "methodName" : "previous",
        "sourceCode" : "viewrs.previous()",
        "resolvedMethod" : "java.sql.ResultSet.previous()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_859_1754048980357"
      }, {
        "methodName" : "getInt",
        "sourceCode" : "viewrs.getInt(\"ID\")",
        "resolvedMethod" : "java.sql.ResultSet.getInt(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_860_1754048980357"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_861_1754048980357"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"PHONE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PHONE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_862_1754048980357"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"TAG\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"TAG\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_863_1754048980358"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"DATE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"DATE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_864_1754048980358"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"PROBLEM\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PROBLEM\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_865_1754048980358"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"NOTES\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NOTES\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_866_1754048980358"
      }, {
        "methodName" : "getString",
        "sourceCode" : "viewrs.getString(\"STATUS\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"STATUS\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_867_1754048980359"
      }, {
        "methodName" : "makeTicket",
        "sourceCode" : "makeTicket(id_col, first_name, phone, tag, date, prob, notes, status)",
        "resolvedMethod" : "database.makeTicket(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "isStatic" : false,
        "arguments" : [ "id_col", "first_name", "phone", "tag", "date", "prob", "notes", "status" ],
        "argumentTypes" : [ "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
        "uniqueId" : "AST_868_1754048980359"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL nextTicket() problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL nextTicket() problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_869_1754048980360"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 19,
      "codeLines" : 19,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "displayAllTickets",
      "qualifiedName" : "database.displayAllTickets",
      "signature" : "displayAllTickets()",
      "returnType" : "String",
      "resolvedReturnType" : "java.lang.String",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : " \r\n     * Displays all tickets sorted by ID with a string. Uses LoopDBInfo to consolidate process\r\n     * @return a string with all of the ticket records\r\n     ",
      "body" : "{\n    String p = \" \";\n    try {\n        rs = stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\");\n        p = loopDBInfo(rs);\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return p;\n}",
      "uniqueId" : "AST_870_1754048980362",
      "symbolId" : "database.displayAllTickets()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"SELECT * FROM JEREMY.TICKET ORDER BY ID\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.TICKET ORDER BY ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_871_1754048980362"
      }, {
        "methodName" : "loopDBInfo",
        "sourceCode" : "loopDBInfo(rs)",
        "resolvedMethod" : "database.loopDBInfo(java.sql.ResultSet)",
        "returnType" : "java.lang.String",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ "rs" ],
        "argumentTypes" : [ "java.sql.ResultSet" ],
        "uniqueId" : "AST_872_1754048980362"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_873_1754048980363"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 10,
      "codeLines" : 10,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "displayNameTickets",
      "qualifiedName" : "database.displayNameTickets",
      "signature" : "displayNameTickets()",
      "returnType" : "String",
      "resolvedReturnType" : "java.lang.String",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Displays all tickets sorted by Name with a string. Uses LoopDBInfo to consolidate process\r\n     * @return a string with all of the ticket records\r\n     ",
      "body" : "{\n    String p = \" \";\n    try {\n        rs = stmt.executeQuery(\"select * from JEREMY.TICKET ORDER BY NAME\");\n        p = loopDBInfo(rs);\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return p;\n}",
      "uniqueId" : "AST_874_1754048980364",
      "symbolId" : "database.displayNameTickets()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"select * from JEREMY.TICKET ORDER BY NAME\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"select * from JEREMY.TICKET ORDER BY NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_875_1754048980364"
      }, {
        "methodName" : "loopDBInfo",
        "sourceCode" : "loopDBInfo(rs)",
        "resolvedMethod" : "database.loopDBInfo(java.sql.ResultSet)",
        "returnType" : "java.lang.String",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ "rs" ],
        "argumentTypes" : [ "java.sql.ResultSet" ],
        "uniqueId" : "AST_876_1754048980364"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_877_1754048980364"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 10,
      "codeLines" : 10,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "loopDBInfo",
      "qualifiedName" : "database.loopDBInfo",
      "signature" : "loopDBInfo(ResultSet)",
      "returnType" : "String",
      "resolvedReturnType" : "java.lang.String",
      "parameters" : [ "rs" ],
      "parameterTypes" : [ "java.sql.ResultSet" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Takes in the standard rs and sifts through the set\r\n     * To get all of the information and puts it in a string.\r\n     * @param rs\r\n     * @return a string with ID/NAME/PHONE/STATUS/PROBLEM info\r\n     ",
      "body" : "{\n    String p = \"\";\n    try {\n        while (rs.next()) {\n            int id_col = rs.getInt(\"ID\");\n            String first_name = rs.getString(\"NAME\");\n            String phone = rs.getString(\"PHONE\");\n            String status = rs.getString(\"STATUS\");\n            String prob = rs.getString(\"PROBLEM\");\n            p = p + (id_col + \" \" + first_name + \" \" + phone + \" \" + status + \" \" + prob + \"\\n\");\n            // System.out.println(p);\n        }\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return p;\n}",
      "uniqueId" : "AST_878_1754048980366",
      "symbolId" : "database.loopDBInfo(ResultSet)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "While: rs.next()" ],
      "methodCalls" : [ {
        "methodName" : "next",
        "sourceCode" : "rs.next()",
        "resolvedMethod" : "java.sql.ResultSet.next()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_879_1754048980366"
      }, {
        "methodName" : "getInt",
        "sourceCode" : "rs.getInt(\"ID\")",
        "resolvedMethod" : "java.sql.ResultSet.getInt(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"ID\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_880_1754048980367"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_881_1754048980367"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"PHONE\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PHONE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_882_1754048980367"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"STATUS\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"STATUS\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_883_1754048980367"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"PROBLEM\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"PROBLEM\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_884_1754048980367"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_885_1754048980368"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 17,
      "codeLines" : 16,
      "commentLines" : 1,
      "blankLines" : 0
    }, {
      "name" : "removeTicket",
      "qualifiedName" : "database.removeTicket",
      "signature" : "removeTicket(int)",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ "num" ],
      "parameterTypes" : [ "int" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Not really used right now.\r\n     * @param num\r\n     ",
      "body" : "{\n    if (!tickets.isEmpty() && num < tickets.size() && num > 0) {\n        tickets.remove(num);\n    }\n}",
      "uniqueId" : "AST_886_1754048980369",
      "symbolId" : "database.removeTicket(int)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "If: !tickets.isEmpty() && num < tickets.size() && num > 0" ],
      "methodCalls" : [ {
        "methodName" : "isEmpty",
        "sourceCode" : "tickets.isEmpty()",
        "resolvedMethod" : "java.util.ArrayList.isEmpty()",
        "returnType" : "boolean",
        "receiverType" : "java.util.ArrayList",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_887_1754048980369"
      }, {
        "methodName" : "size",
        "sourceCode" : "tickets.size()",
        "resolvedMethod" : "java.util.ArrayList.size()",
        "returnType" : "int",
        "receiverType" : "java.util.ArrayList",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_888_1754048980370"
      }, {
        "methodName" : "remove",
        "sourceCode" : "tickets.remove(num)",
        "resolvedMethod" : "java.util.ArrayList.remove(int)",
        "returnType" : "E",
        "receiverType" : "java.util.ArrayList",
        "isStatic" : false,
        "arguments" : [ "num" ],
        "argumentTypes" : [ "int" ],
        "uniqueId" : "AST_889_1754048980370"
      } ],
      "cyclomaticComplexity" : 4,
      "totalLines" : 5,
      "codeLines" : 5,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "addEmployee",
      "qualifiedName" : "database.addEmployee",
      "signature" : "addEmployee(employee)",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ "emp" ],
      "parameterTypes" : [ "employee" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *Adds an employee with the use of employee object\r\n     * Uses empStmt/emprs to insert and updates before it leaves\r\n     * @param emp\r\n     ",
      "body" : "{\n    try {\n        String insert = \"INSERT INTO JEREMY.EMPLOYEE (NAME, USERNAME, PASSWORD) VALUES \" + \"('\" + emp.name + \"','\" + emp.username + \"','\" + emp.password + \"')\";\n        System.out.println(insert);\n        empstmt.executeUpdate(insert);\n        emprs = stmt.executeQuery(\"SELECT * FROM JEREMY.EMPLOYEE\");\n        total();\n    } catch (Exception e) {\n        System.out.println(\"SQL problem dbEmployee Addmployee()\" + e);\n    }\n}",
      "uniqueId" : "AST_890_1754048980373",
      "symbolId" : "database.addEmployee(employee)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "println",
        "sourceCode" : "System.out.println(insert)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "insert" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_891_1754048980373"
      }, {
        "methodName" : "executeUpdate",
        "sourceCode" : "empstmt.executeUpdate(insert)",
        "resolvedMethod" : "java.sql.Statement.executeUpdate(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "insert" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_892_1754048980374"
      }, {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"SELECT * FROM JEREMY.EMPLOYEE\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.EMPLOYEE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_893_1754048980374"
      }, {
        "methodName" : "total",
        "sourceCode" : "total()",
        "resolvedMethod" : "database.total()",
        "returnType" : "int",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_894_1754048980374"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem dbEmployee Addmployee()\" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem dbEmployee Addmployee()\" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_895_1754048980374"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 11,
      "codeLines" : 11,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "delEmployee",
      "qualifiedName" : "database.delEmployee",
      "signature" : "delEmployee(String)",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ "person" ],
      "parameterTypes" : [ "java.lang.String" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Takes a name string from user, goes into employee DB and deletes the person\r\n     * @param person (User supplies this)\r\n     ",
      "body" : "{\n    System.out.println(\"Attempt to delete \" + person);\n    try {\n        String delete = \"DELETE FROM JEREMY.EMPLOYEE WHERE NAME='\" + person + \"'\";\n        stmt.executeUpdate(delete);\n    } catch (Exception e) {\n        System.out.println(person + \" may not exist\" + e);\n    }\n}",
      "uniqueId" : "AST_896_1754048980376",
      "symbolId" : "database.delEmployee(String)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"Attempt to delete \" + person)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"Attempt to delete \" + person" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_897_1754048980376"
      }, {
        "methodName" : "executeUpdate",
        "sourceCode" : "stmt.executeUpdate(delete)",
        "resolvedMethod" : "java.sql.Statement.executeUpdate(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "delete" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_898_1754048980377"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(person + \" may not exist\" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "person + \" may not exist\" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_899_1754048980377"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 9,
      "codeLines" : 9,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "displayAllEmployees",
      "qualifiedName" : "database.displayAllEmployees",
      "signature" : "displayAllEmployees()",
      "returnType" : "String",
      "resolvedReturnType" : "java.lang.String",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     * Displays all employees, uses loopDBEMPinfo to sort info\r\n     * @return a String with all the employees\r\n     ",
      "body" : "{\n    String p = \" \";\n    try {\n        emprs = stmt.executeQuery(\"SELECT * FROM JEREMY.EMPLOYEE\");\n        p = loopDBEMPInfo(emprs);\n        emprs.close();\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return p;\n}",
      "uniqueId" : "AST_900_1754048980378",
      "symbolId" : "database.displayAllEmployees()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e" ],
      "methodCalls" : [ {
        "methodName" : "executeQuery",
        "sourceCode" : "stmt.executeQuery(\"SELECT * FROM JEREMY.EMPLOYEE\")",
        "resolvedMethod" : "java.sql.Statement.executeQuery(java.lang.String)",
        "returnType" : "java.sql.ResultSet",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "\"SELECT * FROM JEREMY.EMPLOYEE\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_901_1754048980378"
      }, {
        "methodName" : "loopDBEMPInfo",
        "sourceCode" : "loopDBEMPInfo(emprs)",
        "resolvedMethod" : "database.loopDBEMPInfo(java.sql.ResultSet)",
        "returnType" : "java.lang.String",
        "receiverType" : "database",
        "isStatic" : false,
        "arguments" : [ "emprs" ],
        "argumentTypes" : [ "java.sql.ResultSet" ],
        "uniqueId" : "AST_902_1754048980378"
      }, {
        "methodName" : "close",
        "sourceCode" : "emprs.close()",
        "resolvedMethod" : "java.sql.ResultSet.close()",
        "returnType" : "void",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_903_1754048980379"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_904_1754048980379"
      } ],
      "cyclomaticComplexity" : 2,
      "totalLines" : 11,
      "codeLines" : 11,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "getArrayAllEmployees",
      "qualifiedName" : "database.getArrayAllEmployees",
      "signature" : "getArrayAllEmployees()",
      "returnType" : "String[]",
      "resolvedReturnType" : "java.lang.String[]",
      "parameters" : [ ],
      "parameterTypes" : [ ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *\r\n     * @return\r\n     ",
      "body" : "{\n    String[] employees = new String[7];\n    try {\n        emprs.beforeFirst();\n        int i = 0;\n        while (emprs.next()) {\n            String name = emprs.getString(\"NAME\");\n            employees[i] = name;\n            i++;\n        }\n        emprs.close();\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return employees;\n}",
      "uniqueId" : "AST_905_1754048980380",
      "symbolId" : "database.getArrayAllEmployees()",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "While: emprs.next()" ],
      "methodCalls" : [ {
        "methodName" : "beforeFirst",
        "sourceCode" : "emprs.beforeFirst()",
        "resolvedMethod" : "java.sql.ResultSet.beforeFirst()",
        "returnType" : "void",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_906_1754048980380"
      }, {
        "methodName" : "next",
        "sourceCode" : "emprs.next()",
        "resolvedMethod" : "java.sql.ResultSet.next()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_907_1754048980380"
      }, {
        "methodName" : "getString",
        "sourceCode" : "emprs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_908_1754048980381"
      }, {
        "methodName" : "close",
        "sourceCode" : "emprs.close()",
        "resolvedMethod" : "java.sql.ResultSet.close()",
        "returnType" : "void",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_909_1754048980381"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_910_1754048980381"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 16,
      "codeLines" : 16,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "loopDBEMPInfo",
      "qualifiedName" : "database.loopDBEMPInfo",
      "signature" : "loopDBEMPInfo(ResultSet)",
      "returnType" : "String",
      "resolvedReturnType" : "java.lang.String",
      "parameters" : [ "rs" ],
      "parameterTypes" : [ "java.sql.ResultSet" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *\r\n     * @param rs\r\n     * @return\r\n     ",
      "body" : "{\n    String p = \"     USERNAME    |    NAME     \\n\";\n    try {\n        while (rs.next()) {\n            String username = rs.getString(\"USERNAME\");\n            String name = rs.getString(\"NAME\");\n            String space = \"                           \";\n            System.out.println(space.substring(0, 15));\n            p = p + (\"        \" + username + space.substring(0, space.length() - (username.length() * 2)) + name + \"\\n\");\n        }\n    } catch (Exception e) {\n        System.out.println(\"SQL problem \" + e);\n    }\n    return p;\n}",
      "uniqueId" : "AST_911_1754048980382",
      "symbolId" : "database.loopDBEMPInfo(ResultSet)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "While: rs.next()" ],
      "methodCalls" : [ {
        "methodName" : "next",
        "sourceCode" : "rs.next()",
        "resolvedMethod" : "java.sql.ResultSet.next()",
        "returnType" : "boolean",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_912_1754048980383"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"USERNAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"USERNAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_913_1754048980383"
      }, {
        "methodName" : "getString",
        "sourceCode" : "rs.getString(\"NAME\")",
        "resolvedMethod" : "java.sql.ResultSet.getString(java.lang.String)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.sql.ResultSet",
        "isStatic" : false,
        "arguments" : [ "\"NAME\"" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_914_1754048980383"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(space.substring(0, 15))",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "space.substring(0, 15)" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_915_1754048980383"
      }, {
        "methodName" : "substring",
        "sourceCode" : "space.substring(0, 15)",
        "resolvedMethod" : "java.lang.String.substring(int, int)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.String",
        "isStatic" : false,
        "arguments" : [ "0", "15" ],
        "argumentTypes" : [ "int", "int" ],
        "uniqueId" : "AST_916_1754048980385"
      }, {
        "methodName" : "substring",
        "sourceCode" : "space.substring(0, space.length() - (username.length() * 2))",
        "resolvedMethod" : "java.lang.String.substring(int, int)",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.String",
        "isStatic" : false,
        "arguments" : [ "0", "space.length() - (username.length() * 2)" ],
        "argumentTypes" : [ "int", "int" ],
        "uniqueId" : "AST_917_1754048980385"
      }, {
        "methodName" : "length",
        "sourceCode" : "space.length()",
        "resolvedMethod" : "java.lang.String.length()",
        "returnType" : "int",
        "receiverType" : "java.lang.String",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_918_1754048980386"
      }, {
        "methodName" : "length",
        "sourceCode" : "username.length()",
        "resolvedMethod" : "java.lang.String.length()",
        "returnType" : "int",
        "receiverType" : "java.lang.String",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_919_1754048980386"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"SQL problem \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"SQL problem \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_920_1754048980386"
      } ],
      "cyclomaticComplexity" : 3,
      "totalLines" : 15,
      "codeLines" : 15,
      "commentLines" : 0,
      "blankLines" : 0
    }, {
      "name" : "updateEmployeeStatus",
      "qualifiedName" : "database.updateEmployeeStatus",
      "signature" : "updateEmployeeStatus(int, int)",
      "returnType" : "void",
      "resolvedReturnType" : "void",
      "parameters" : [ "ID", "numstatus" ],
      "parameterTypes" : [ "int", "int" ],
      "modifiers" : "[public ]",
      "annotations" : "[]",
      "comment" : "\r\n     *\r\n     * @param ID\r\n     * @param numstatus\r\n     ",
      "body" : "{\n    try {\n        String status = \"\";\n        switch(numstatus) {\n            case 0:\n                status = Status.NEW.toString();\n                break;\n            case 1:\n                status = Status.IN_PROGRESS.toString();\n                break;\n            case 2:\n                status = Status.ON_HOLD.toString();\n                break;\n            case 3:\n                status = Status.COMPLETED.toString();\n                break;\n            default:\n                status = Status.NEW.toString();\n                break;\n        }\n        String update = \"UPDATE JEREMY.TICKET SET STATUS='\" + status + \"' WHERE ID=\" + ID;\n        System.out.println(status);\n        System.out.println(update);\n        currentticket.status = status;\n        stmt.executeUpdate(update);\n        //    viewrs = viewstmt. (\"UPDATE JEREMY.TICKET SET STATUS='\" +  status + \"' WHERE ID=\" + ID);\n    } catch (Exception e) {\n        System.out.println(\"sql issue in updateEmployeeStatus \" + e);\n    }\n}",
      "uniqueId" : "AST_921_1754048980388",
      "symbolId" : "database.updateEmployeeStatus(int, int)",
      "visibility" : "PUBLIC",
      "isAbstract" : false,
      "isStatic" : false,
      "isFinal" : false,
      "isSynchronized" : false,
      "isNative" : false,
      "isDefault" : false,
      "controlFlowStatements" : [ "Try", "Catch: Exception e", "Switch: numstatus" ],
      "methodCalls" : [ {
        "methodName" : "toString",
        "sourceCode" : "Status.NEW.toString()",
        "resolvedMethod" : "java.lang.Enum.toString()",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.Enum",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_922_1754048980388"
      }, {
        "methodName" : "toString",
        "sourceCode" : "Status.IN_PROGRESS.toString()",
        "resolvedMethod" : "java.lang.Enum.toString()",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.Enum",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_923_1754048980396"
      }, {
        "methodName" : "toString",
        "sourceCode" : "Status.ON_HOLD.toString()",
        "resolvedMethod" : "java.lang.Enum.toString()",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.Enum",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_924_1754048980397"
      }, {
        "methodName" : "toString",
        "sourceCode" : "Status.COMPLETED.toString()",
        "resolvedMethod" : "java.lang.Enum.toString()",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.Enum",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_925_1754048980397"
      }, {
        "methodName" : "toString",
        "sourceCode" : "Status.NEW.toString()",
        "resolvedMethod" : "java.lang.Enum.toString()",
        "returnType" : "java.lang.String",
        "receiverType" : "java.lang.Enum",
        "isStatic" : false,
        "arguments" : [ ],
        "argumentTypes" : [ ],
        "uniqueId" : "AST_926_1754048980398"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(status)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "status" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_927_1754048980398"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(update)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "update" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_928_1754048980399"
      }, {
        "methodName" : "executeUpdate",
        "sourceCode" : "stmt.executeUpdate(update)",
        "resolvedMethod" : "java.sql.Statement.executeUpdate(java.lang.String)",
        "returnType" : "int",
        "receiverType" : "java.sql.Statement",
        "isStatic" : false,
        "arguments" : [ "update" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_929_1754048980400"
      }, {
        "methodName" : "println",
        "sourceCode" : "System.out.println(\"sql issue in updateEmployeeStatus \" + e)",
        "resolvedMethod" : "java.io.PrintStream.println(java.lang.String)",
        "returnType" : "void",
        "receiverType" : "java.io.PrintStream",
        "isStatic" : false,
        "arguments" : [ "\"sql issue in updateEmployeeStatus \" + e" ],
        "argumentTypes" : [ "java.lang.String" ],
        "uniqueId" : "AST_930_1754048980401"
      } ],
      "cyclomaticComplexity" : 7,
      "totalLines" : 30,
      "codeLines" : 29,
      "commentLines" : 1,
      "blankLines" : 0
    } ]
  } ]
}